module SoleDataViz

using SoleData
using GLMakie, GeometryBasics

"""
    plot_scalardnf(formula; kwargs...)::GLMakie.Figure

Plot a 3D voxel visualization of a scalar DNF formula. Each disjunct is represented as a separate layer, with variables on the x-axis and threshold intervals on the y-axis.

# Keyword Arguments
- `show_all_variables`: Whether to show all variables (default: false)
- `palette`: Color palette for different variables (default: [:cyan, :green, :yellow, :magenta, :blue])
- `body_char`: Character for body representation (default: =)
- `gap`: Gap between voxels (default: 0.0)
- `scale`: 3D scaling vector (default: Vec3f(1.0, 1.0, 0.5))
- `show_axes`: Whether to show axis labels and ticks (default: true)
- `title`: Optional title for the plot (default: nothing)

# Returns
- `Figure`: A GLMakie figure containing the 3D voxel plot
"""
function plot_scalardnf(
    formula::DNF;
    show_all_variables::Bool = false,
    palette::Vector{Symbol} = [:cyan, :green, :yellow, :magenta, :blue],
    body_char::Char = '=', # alternatives: ■, ━
    gap::Real = 0.0,
    scale::Vec3f = Vec3f(1.0, 1.0, 0.5),
    show_axes::Bool = true,
    title::Union{String, Nothing} = nothing,
)::GLMakie.Figure
    # Normalize the formula to ensure consistent representation
    formula = normalize(formula)
    disjs = SoleLogics.disjuncts(formula)
    
    # Extract intervals for each disjunct
    all_intervals = [extract_intervals(d) for d in disjs]
    
    # Gather all unique variables across all disjuncts
    all_vars = Set{Any}()
    for intervals in all_intervals, v in keys(intervals)
        push!(all_vars, v)
    end
    all_vars = sort(collect(all_vars))
    
    # Collect all threshold values for consistent axis scaling
    all_thresholds = collect_thresholds(all_intervals)
    
    # Create 3D cube: (variables, threshold_segments, disjuncts)
    cube = fill(false, (length(all_vars), length(all_thresholds) - 1, length(disjs)))
    
    # Fill the cube with interval data for each disjunct
    for (i, (d, intervals)) in enumerate(zip(disjs, all_intervals))
        for (j, var) in enumerate(all_vars)
            if !haskey(intervals, var)
                # Variable not present in this disjunct
                continue
            end
            
            interval = intervals[var]
            segmenttypes, first_idx, last_idx = SoleData.compute_segmenttypes(interval, all_thresholds)
            # Mark segments as active (true) where the interval is satisfied
            cube[j, :, i] = map(x -> x.full, segmenttypes)
        end
    end

    # Create the 3D plot
    fig = Figure()
    ax = LScene(fig[1, 1], scenekw = (camera = cam3d!,))

    # Create color mapping: each variable gets a unique color
    color_index = [x for x in 1:size(cube, 1), y in 1:size(cube, 2), z in 1:size(cube, 3)]
    color_data = ifelse.(cube, color_index, NaN)

    # Plot the voxels
    voxels!(ax,
        0 .. (size(cube, 1)-1),
        0 .. (size(cube, 2)-1), 
        0 .. (size(cube, 3)-1),
        color_data;
        colormap = palette,
        colorrange = (1, length(palette)),
        gap
    )

    # Add axis labels and formatting
    if show_axes
        ax.xlabel = "Variables"
        ax.ylabel = "Threshold Segments" 
        ax.zlabel = "Disjuncts"
        
        # Set variable names as x-axis ticks
        ax.xticks = (0:length(all_vars)-1, [string(v) for v in all_vars])
        
        # Set disjunct numbers as z-axis ticks
        ax.zticks = (0:length(disjs)-1, [string(i) for i in 1:length(disjs)])
    end

    # Add title if provided
    if !isnothing(title)
        fig[0, 1] = Label(fig, title, fontsize = 16)
    end

    fig
end

end
